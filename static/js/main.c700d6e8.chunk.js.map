{"version":3,"sources":["hooks/contextHook/index.js","hooks/httpHook/index.js","components/WeatherCard/index.js","components/WeatherIcon/index.js","components/DayWeather/index.js","util/dateFormatter.js","components/WeatherWindow/index.js","components/SearchBar/index.js","containers/Main/index.js","util/theme.js","App.js","index.js"],"names":["Context","React","createContext","useHttp","useState","loading","setLoading","error","setError","success","setSuccess","request","useCallback","url","a","method","data","response","axios","then","res","catch","err","console","clearError","useStyles","makeStyles","root","maxWidth","margin","media","height","WeatherCard","handleOpen","city","country","name","coordinates","temperature","temp_min","temp_max","weather","item","setItem","classes","key","useContext","openWindow","Object","keys","length","getData","targetItem","sys","coord","main","temp","toFixed","useEffect","Card","className","CardActionArea","onClick","Skeleton","variant","width","CardContent","Typography","gutterBottom","component","color","Grid","description","CardActions","Button","size","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","WeatherIcon","day","DayWeather","dayItem","setDayItem","formatDate","dayjs","relativeTime","calendar","weekday","utc","number","format","useTime","dt","min","max","icon","ListItem","role","undefined","dense","button","ListItemIcon","ListItemText","primary","secondary","WeatherWindow","handleClose","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","current","daily","lat","lon","slice","Dialog","fullWidth","onClose","DialogTitle","DialogContent","Divider","List","map","DialogActions","autoFocus","withStyles","search","position","borderRadius","shape","backgroundColor","fade","palette","light","marginLeft","marginBottom","spacing","up","searchIcon","padding","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","confirmForm","onChange","value","setValue","onSubmit","e","preventDefault","InputBase","placeholder","target","input","inputProps","type","container","paddingTop","searchTool","Main","opened","setOpened","activeItem","setActiveItem","cities","setCities","handleClickOpen","checkCity","inputValue","findIndex","toLowerCase","newArr","Container","Toolbar","SearchBar","xs","sm","md","message","dark","contrastText","App","defaults","baseURL","createMuiTheme","themeStyle","ThemeProvider","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c700d6e8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Context = React.createContext();","import { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const request = useCallback(async (url, method = \"get\", data = null) => {\r\n    setLoading(true);\r\n    let response = null;\r\n    await axios({\r\n      url, method, data\r\n    })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setSuccess(true);\r\n        response = res.data;\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.response.data);\r\n        setLoading(false);\r\n        setError(err.response.data)\r\n      })\r\n    return response;\r\n  }, [])\r\n\r\n  const clearError = () => {\r\n    setError('');\r\n    setSuccess(false);\r\n  };\r\n\r\n  return {\r\n    loading, request, error, clearError, success\r\n  }\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Context } from '../../hooks/contextHook';\r\nimport { useHttp } from '../../hooks/httpHook';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n//MUI\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    margin: '0 auto',\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nconst WeatherCard = ({ handleOpen, city }) => {\r\n  const [item, setItem] = useState({\r\n    country: '',\r\n    name: '',\r\n    coordinates: {},\r\n    temperature: '',\r\n    temp_min: '',\r\n    temp_max: '',\r\n    weather: {}\r\n  });\r\n  const classes = useStyles();\r\n  const { key } = useContext(Context);\r\n  const { request, loading, error } = useHttp();\r\n\r\n  const openWindow = () => {\r\n    if (Object.keys(item).length) {\r\n      handleOpen(item);\r\n    }\r\n    else return;\r\n  }\r\n\r\n  const getData = async () => {\r\n    const data = await request(`weather?q=${city}&units=metric&appid=${key}`, 'get');\r\n    if (data) {\r\n      const targetItem = {\r\n        name: `${data.name}, ${data.sys.country}`,\r\n        coordinates: data.coord,\r\n        temperature: data.main.temp.toFixed(0),\r\n        temp_min: data.main.temp_min.toFixed(0),\r\n        temp_max: data.main.temp_max.toFixed(0),\r\n        weather: data.weather\r\n      }\r\n      setItem(targetItem);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardActionArea onClick={openWindow}>\r\n          {\r\n            loading ? <Skeleton variant=\"rect\" width=\"100%\" height={200} /> : (\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {item.name}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                  Day {item.temp_max}°C - Night {item.temp_min}°C\r\n                </Typography>\r\n                <Grid className={classes.main}>\r\n                  <Typography variant=\"h2\" color=\"textSecondary\">\r\n                    {item.temperature}°C\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    {item.weather.description}\r\n                  </Typography>\r\n                </Grid>\r\n              </CardContent>\r\n            )\r\n          }\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button onClick={openWindow} size=\"small\" color=\"primary\">\r\n            More\r\n        </Button>\r\n        </CardActions>\r\n      </Card>\r\n      <Snackbar\r\n        open={!!error}\r\n        autoHideDuration={2500}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          severity=\"error\">An error occurred, please try again later</Alert>\r\n      </Snackbar>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default WeatherCard","import React from 'react';\r\n\r\nconst WeatherIcon = ({ description, day = \"sunny\" }) => {\r\n  if (description === \"Clear\") {\r\n    if (day) {\r\n      return (\r\n        <div className=\"Clear\">\r\n          <i className=\"fas fa-sun\"></i>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"night\">\r\n          <i className=\"fas fa-moon\"></i>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  else if (description === \"Drizzle\") {\r\n    return (\r\n      <div className=\"Drizzle\">\r\n        <i className=\"fas fa-cloud-rain\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Rain\") {\r\n    return (\r\n      <div className=\"Rain\">\r\n        <i className=\"fas fa-cloud-showers-heavy\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Thunderstorm\") {\r\n    return (\r\n      <div className=\"Thunderstorm\">\r\n        <i className=\"fas fa-cloud-showers-heavy\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Clouds\") {\r\n    if (day) {\r\n      return (\r\n        <div className=\"Clouds-morning\">\r\n          <i className=\"fas fa-cloud\"></i>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className={description}>\r\n          <i className=\"fas fa-cloud\"></i>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  else {\r\n    return (\r\n      <div className={description}>\r\n        <i className=\"fas fa-smog\"></i>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherIcon;","import React, { useEffect, useState } from 'react';\r\nimport { useTime } from '../../util/dateFormatter';\r\nimport WeatherIcon from '../WeatherIcon';\r\n//MUI\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\n\r\nconst DayWeather = ({ day }) => {\r\n  const [dayItem, setDayItem] = useState({});\r\n  const { formatDate } = useTime();\r\n\r\n  useEffect(() => {\r\n    if (day.dt) {\r\n      setDayItem({\r\n        min: day.temp.min.toFixed(0),\r\n        max: day.temp.max.toFixed(0),\r\n        description: day.weather[0].description,\r\n        icon: day.weather[0].main,\r\n      })\r\n    }\r\n  }, [day])\r\n\r\n  return (\r\n    <ListItem role={undefined} dense button >\r\n      {day.dt ? (\r\n        <>\r\n          <ListItemIcon>\r\n            <WeatherIcon description={dayItem.icon} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={`${formatDate(day.dt)}, ` + dayItem.max + '/' + dayItem.min + '°C'} secondary={dayItem.description} />\r\n        </>\r\n      ) : null}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default DayWeather\r\n","import * as dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport 'dayjs/locale/ru';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport calendar from 'dayjs/plugin/calendar';\r\nimport weekday from 'dayjs/plugin/weekday'\r\n\r\nexport const useTime = () => {\r\n  dayjs.extend(relativeTime);\r\n  dayjs.extend(calendar);\r\n  dayjs.extend(weekday)\r\n  dayjs.extend(utc);\r\n  dayjs.locale('en');\r\n\r\n  const formatDate = (number) => {\r\n    return dayjs.unix(number).format('ddd, MMM-DD')\r\n  }\r\n\r\n  return {\r\n    formatDate,\r\n  }\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Context } from '../../hooks/contextHook';\r\nimport { useHttp } from '../../hooks/httpHook';\r\nimport DayWeather from '../DayWeather';\r\n//MUI\r\nimport List from '@material-ui/core/List';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst WeatherWindow = ({ handleClose, open, city }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const { request, loading, error } = useHttp();\r\n  const { key } = useContext(Context);\r\n  const [item, setItem] = useState({\r\n    current: {\r\n      temperature: 0,\r\n      temp_min: 0,\r\n      temp_max: 0\r\n    },\r\n    daily: {\r\n\r\n    }\r\n  });\r\n\r\n  const getData = async () => {\r\n    const data = await request(`onecall?lat=${city.coordinates.lat}&lon=${city.coordinates.lon}&exclude=hourly,minutely&units=metric&appid=${key}`, 'get');\r\n    if (data) {\r\n      setItem({\r\n        daily: data.daily.slice(1, data.daily.length),\r\n        current: city\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (city.name) {\r\n      getData()\r\n    }\r\n  }, [city])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>{city.name}</DialogTitle>\r\n        <DialogContent>\r\n          {\r\n            loading ? <Skeleton width={'100%'} height={700} /> : (\r\n              <>\r\n                <Grid>\r\n                  <Typography variant=\"h2\" color=\"textSecondary\">\r\n                    {item.current.temperature}°C\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    Day {item.current.temp_max}°C - Night {item.current.temp_min}°C\r\n                </Typography>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid>\r\n                  <Typography variant=\"h5\">7-day forecast</Typography>\r\n                  <List>\r\n                    {\r\n                      item.daily.length ? item.daily.map((day) => {\r\n                        return <DayWeather key={day.dt} day={day} />\r\n                      }) : null\r\n                    }\r\n                  </List>\r\n                </Grid>\r\n              </>\r\n            )\r\n          }\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherWindow","import React, { useState, useEffect } from 'react'\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport { fade } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.primary.light, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.primary.light, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    marginBottom: theme.spacing(1),\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n  confirmForm: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n  }\r\n});\r\n\r\nconst SearchInput = ({ classes, onChange }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const submitValue = (e) => {\r\n    e.preventDefault();\r\n    onChange(value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitValue} className={classes.confirmForm}>\r\n      <div className={classes.search}>\r\n        <div className={classes.searchIcon}>\r\n          <SearchIcon />\r\n        </div>\r\n        <InputBase\r\n          placeholder=\"Search...\"\r\n          onChange={(e) => setValue(e.target.value)}\r\n          classes={{\r\n            root: classes.inputRoot,\r\n            input: classes.inputInput,\r\n          }}\r\n          inputProps={{ 'aria-label': 'search' }}\r\n        />\r\n      </div>\r\n      <Button type=\"submit\">Add</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default withStyles(styles)(SearchInput)\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Context } from '../../hooks/contextHook';\r\nimport { useHttp } from '../../hooks/httpHook';\r\nimport WeatherCard from '../../components/WeatherCard';\r\nimport WeatherWindow from '../../components/WeatherWindow';\r\nimport SearchBar from '../../components/SearchBar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n//MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    paddingTop: theme.spacing(25), \r\n  },\r\n  searchTool: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n}))\r\n\r\nconst Main = () => {\r\n  const classes = useStyles();\r\n  const [opened, setOpened] = useState(false);\r\n  const [value, setValue] = useState('');\r\n  const [activeItem, setActiveItem] = useState({});\r\n  const { request, error } = useHttp();\r\n  const { key } = useContext(Context);\r\n  const [cities, setCities] = useState(['Moscow', 'London', 'New York', 'Beijing']);\r\n\r\n  const handleClickOpen = (item) => {\r\n    setActiveItem(item)\r\n    setOpened(true);\r\n  };\r\n\r\n  const checkCity = async (inputValue) => {\r\n    const data = await request(`weather?q=${inputValue}&units=metric&appid=${key}`, 'get');\r\n    if (data) {\r\n      let alreadyInList = cities.findIndex(item => item.toLowerCase() === inputValue.toLowerCase());\r\n      if (alreadyInList + 1) {\r\n        return;\r\n      }\r\n      let newArr = [...cities, inputValue];\r\n      setCities(newArr)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      checkCity(value);\r\n    }\r\n  }, [value])\r\n\r\n  const handleClose = () => {\r\n    setOpened(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <Grid>\r\n      <WeatherWindow city={activeItem} open={opened} handleClose={handleClose} />\r\n      <Container maxWidth=\"md\" className={classes.container}>\r\n        <Toolbar className={classes.searchTool}>\r\n          <SearchBar onChange={setValue} />\r\n        </Toolbar>\r\n        <Grid container spacing={2}>\r\n          {\r\n            cities.map(item => {\r\n              return (\r\n                <Grid key={item} item xs={12} sm={6} md={3}>\r\n                  <WeatherCard city={item} handleOpen={handleClickOpen} />\r\n                </Grid>\r\n              )\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n      <Snackbar\r\n        open={!!error}\r\n        autoHideDuration={2500}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          severity=\"error\">{error.message}</Alert>\r\n      </Snackbar>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Main\r\n"," \r\nlet palette = {\r\n  type: 'dark', \r\n  primary: {\r\n    light: '#bbdefb',\r\n    main: '#42a5f5',\r\n    dark: '#0d47a1',\r\n    contrastText: '#ede7f6',\r\n  },\r\n  secondary: {\r\n    light: '#ffecb3',\r\n    main: '#ff9e43',\r\n    dark: '#827017',\r\n    contrastText: '#e0f7fa',\r\n  }\r\n}\r\nexport default {\r\n  palette,\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Context } from './hooks/contextHook';\r\nimport Main from './containers/Main';\r\nimport themeStyle from './util/theme';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nconst apiKey = '433b880a1dcad0ae0eb12634ab640f6b';\r\nfunction App() {\r\n  axios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5/';\r\n\r\n  const theme = createMuiTheme(themeStyle);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Context.Provider value={{ key: apiKey }}>\r\n        <Main />\r\n      </Context.Provider>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n); \r\n"],"sourceRoot":""}