{"version":3,"sources":["hooks/contextHook/index.js","hooks/httpHook/index.js","components/WeatherCard/index.js","components/WeatherIcon/index.js","components/DayWeather/index.js","util/dateFormatter.js","components/WeatherWindow/index.js","containers/Main/index.js","App.js","index.js"],"names":["Context","React","createContext","useHttp","useState","loading","setLoading","error","setError","success","setSuccess","request","useCallback","url","a","method","data","response","axios","then","res","catch","err","console","clearError","useStyles","makeStyles","root","maxWidth","media","height","WeatherCard","handleOpen","city","country","name","coordinates","temperature","temp_min","temp_max","weather","item","setItem","classes","key","useContext","openWindow","Object","keys","length","getData","targetItem","sys","coord","main","temp","toFixed","useEffect","Card","className","CardActionArea","onClick","Skeleton","variant","width","CardContent","Typography","gutterBottom","component","color","Grid","description","CardActions","Button","size","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","WeatherIcon","day","log","class","DayWeather","dayItem","setDayItem","formatDate","dayjs","relativeTime","calendar","weekday","utc","number","Date","add","format","useTime","dt","min","max","icon","ListItem","role","undefined","dense","button","ListItemIcon","ListItemText","primary","secondary","WeatherWindow","handleClose","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","current","daily","lat","lon","slice","Dialog","fullWidth","onClose","DialogTitle","DialogContent","Divider","List","map","DialogActions","autoFocus","container","paddingTop","spacing","Main","opened","setOpened","activeItem","setActiveItem","cities","handleClickOpen","Container","xs","sm","md","App","defaults","baseURL","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"8KAEaA,EAAUC,IAAMC,gB,iCCAhBC,EAAU,WAAO,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,OAEDF,mBAAS,IAFR,mBAEpBG,EAFoB,KAEbC,EAFa,OAGGJ,oBAAS,GAHZ,mBAGpBK,EAHoB,KAGXC,EAHW,KA4B3B,MAAO,CACLL,UAASM,QAzBKC,sBAAW,uCAAC,WAAOC,GAAP,+BAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAC7DV,GAAW,GACPW,EAAW,KAFW,SAGpBC,IAAM,CACVL,MAAKE,SAAQC,SAEZG,MAAK,SAACC,GACLd,GAAW,GACXI,GAAW,GACXO,EAAWG,EAAIJ,QAEhBK,OAAM,SAACC,GACNC,QAAQhB,MAAMe,EAAIL,SAASD,MAC3BV,GAAW,GACXE,EAASc,EAAIL,SAASD,SAdA,gCAgBnBC,GAhBmB,2CAAD,sDAiBxB,IAQiBV,QAAOiB,WANR,WACjBhB,EAAS,IACTE,GAAW,IAI0BD,Y,kGCfnCgB,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAwFGC,EApFK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAAW,EACpB7B,mBAAS,CAC/B8B,QAAS,GACTC,KAAM,GACNC,YAAa,GACbC,YAAa,GACbC,SAAU,GACVC,SAAU,GACVC,QAAS,KARiC,mBACrCC,EADqC,KAC/BC,EAD+B,KAUtCC,EAAUlB,IACRmB,EAAQC,qBAAW7C,GAAnB4C,IAXoC,EAYRzC,IAA5BQ,EAZoC,EAYpCA,QAASN,EAZ2B,EAY3BA,QAASE,EAZkB,EAYlBA,MAEpBuC,EAAa,WACbC,OAAOC,KAAKP,GAAMQ,QACpBjB,EAAWS,IAKTS,EAAO,uCAAG,8BAAApC,EAAA,sEACKH,EAAQ,aAAD,OAAcsB,EAAd,+BAAyCW,GAAO,OAD5D,QACR5B,EADQ,UAGNmC,EAAa,CACjBhB,KAAK,GAAD,OAAKnB,EAAKmB,KAAV,aAAmBnB,EAAKoC,IAAIlB,SAChCE,YAAapB,EAAKqC,MAClBhB,YAAarB,EAAKsC,KAAKC,KAAKC,QAAQ,GACpClB,SAAUtB,EAAKsC,KAAKhB,SAASkB,QAAQ,GACrCjB,SAAUvB,EAAKsC,KAAKf,SAASiB,QAAQ,GACrChB,QAASxB,EAAKwB,SAEhBE,EAAQS,IAXI,2CAAH,qDAmBb,OAJAM,qBAAU,WACRP,MACC,IAGD,oCACE,kBAACQ,EAAA,EAAD,CAAMC,UAAWhB,EAAQhB,MACvB,kBAACiC,EAAA,EAAD,CAAgBC,QAASf,GAErBzC,EAAU,kBAACyD,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAM,OAAOlC,OAAQ,MACtD,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACJ,QAAQ,KAAKK,UAAU,MAC7C3B,EAAKN,MAER,kBAAC+B,EAAA,EAAD,CAAYH,QAAQ,YAAYM,MAAM,iBAAtC,OACO5B,EAAKF,SADZ,iBACiCE,EAAKH,SADtC,SAGA,kBAACgC,EAAA,EAAD,CAAMX,UAAWhB,EAAQW,MACvB,kBAACY,EAAA,EAAD,CAAYH,QAAQ,KAAKM,MAAM,iBAC5B5B,EAAKJ,YADR,SAGA,kBAAC6B,EAAA,EAAD,CAAYH,QAAQ,YAAYM,MAAM,iBACnC5B,EAAKD,QAAQ+B,gBAO1B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQZ,QAASf,EAAY4B,KAAK,QAAQL,MAAM,WAAhD,UAKJ,kBAACM,EAAA,EAAD,CACEC,OAAQrE,EACRsE,iBAAkB,KAClBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAEhD,kBAACC,EAAA,EAAD,CACEC,SAAS,SADX,gD,oFClCOC,EAjEK,SAAC,GAAoC,IAAlCZ,EAAiC,EAAjCA,YAAiC,IAApBa,WAAoB,MAAd,QAAc,EAEtD,OADA7D,QAAQ8D,IAAID,GACQ,UAAhBb,EACEa,GACF7D,QAAQ8D,IAAI,kBAEV,yBAAK1B,UAAU,SACb,uBAAG2B,MAAM,iBAMX,yBAAK3B,UAAU,SACb,uBAAG2B,MAAM,iBAKQ,YAAhBf,EAEL,yBAAKZ,UAAU,WACb,uBAAG2B,MAAM,uBAIU,SAAhBf,EAEL,yBAAKZ,UAAU,QACb,uBAAG2B,MAAM,gCAIU,iBAAhBf,EAEL,yBAAKZ,UAAU,gBACb,uBAAG2B,MAAM,gCAIU,WAAhBf,EACHa,EAEA,yBAAKzB,UAAU,kBACb,uBAAG2B,MAAM,kBAMX,yBAAK3B,UAAWY,GACd,uBAAGe,MAAM,kBAOb,yBAAK3B,UAAWY,GACd,uBAAGe,MAAM,kB,2BCtBFC,EA7BI,SAAC,GAAa,IAAXH,EAAU,EAAVA,IAAU,EACAhF,mBAAS,IADT,mBACvBoF,EADuB,KACdC,EADc,KAEtBC,ECLa,WACrBC,SAAaC,KACbD,SAAaE,KACbF,SAAaG,KACbH,SAAaI,KACbJ,SAAa,MAMb,MAAO,CACLD,WALiB,SAACM,GAClB,OAAOL,EAAM,IAAIM,MAAQC,IAAIF,EAAQ,KAAKG,OAAO,gBDH5BC,GAAfV,WAaR,OAXAjC,qBAAU,WACJ2B,EAAIiB,IACNZ,EAAW,CACTa,IAAKlB,EAAI7B,KAAK+C,IAAI9C,QAAQ,GAC1B+C,IAAKnB,EAAI7B,KAAKgD,IAAI/C,QAAQ,GAC1Be,YAAaa,EAAI5C,QAAQ,GAAG+B,YAC5BiC,KAAMpB,EAAI5C,QAAQ,GAAGc,SAGxB,CAAC8B,IAGF,kBAACqB,EAAA,EAAD,CAAUC,UAAMC,EAAWC,OAAK,EAACC,QAAM,GACpCzB,EAAIiB,GACH,oCACE,kBAACS,EAAA,EAAD,KACE,kBAAC,EAAD,CAAavC,YAAaiB,EAAQgB,QAEpC,kBAACO,EAAA,EAAD,CAAcC,QAAS,UAAGtB,EAAWN,EAAIiB,IAAlB,MAA4Bb,EAAQe,IAAM,IAAMf,EAAQc,IAAM,QAAMW,UAAWzB,EAAQjB,eAE9G,O,uEEiEK2C,EAjFO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,YAAavC,EAAiB,EAAjBA,KAAM3C,EAAW,EAAXA,KACpCmF,EAAQC,cACRC,EAAaC,YAAcH,EAAMI,YAAYC,KAAK,OAFH,EAGjBtH,IAA5BQ,EAH6C,EAG7CA,QAASN,EAHoC,EAGpCA,QACTuC,GAJ6C,EAG3BrC,MACVsC,qBAAW7C,GAAnB4C,KAJ6C,EAK7BxC,mBAAS,CAC/BsH,QAAS,CACPrF,YAAa,EACbC,SAAU,EACVC,SAAU,GAEZoF,MAAO,KAX4C,mBAK9ClF,EAL8C,KAKxCC,EALwC,KAgB/CQ,EAAO,uCAAG,4BAAApC,EAAA,sEACKH,EAAQ,eAAD,OAAgBsB,EAAKG,YAAYwF,IAAjC,gBAA4C3F,EAAKG,YAAYyF,IAA7D,uDAA+GjF,GAAO,OADlI,QACR5B,EADQ,SAGZ0B,EAAQ,CACNiF,MAAO3G,EAAK2G,MAAMG,MAAM,EAAG9G,EAAK2G,MAAM1E,OAAS,GAC/CyE,QAASzF,IALC,2CAAH,qDAkBb,OARAwB,qBAAU,WACJxB,EAAKE,MACPe,MAED,CAACjB,IAKF,6BACE,kBAAC8F,EAAA,EAAD,CACEC,WAAS,EACTpG,SAAS,KACT0F,WAAYA,EACZ1C,KAAMA,EACNqD,QAASd,GAET,kBAACe,EAAA,EAAD,KAAcjG,EAAKE,MACnB,kBAACgG,EAAA,EAAD,KAEI9H,EAAU,kBAACyD,EAAA,EAAD,CAAUE,MAAO,OAAQlC,OAAQ,MACzC,oCACE,kBAACwC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAYH,QAAQ,KAAKM,MAAM,iBAC5B5B,EAAKiF,QAAQrF,YADhB,SAGA,kBAAC6B,EAAA,EAAD,CAAYH,QAAQ,YAAYM,MAAM,iBAAtC,OACO5B,EAAKiF,QAAQnF,SADpB,iBACyCE,EAAKiF,QAAQpF,SADtD,UAIF,kBAAC8F,EAAA,EAAD,MACA,kBAAC9D,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,CAAYH,QAAQ,MAApB,kBACA,kBAACsE,EAAA,EAAD,KAEI5F,EAAKkF,MAAM1E,OAASR,EAAKkF,MAAMW,KAAI,SAAClD,GAClC,OAAO,kBAAC,EAAD,CAAYxC,IAAKwC,EAAIiB,GAAIjB,IAAKA,OAClC,SAQnB,kBAACmD,EAAA,EAAD,KACE,kBAAC9D,EAAA,EAAD,CAAQ+D,WAAS,EAAC3E,QAASsD,EAAa9C,MAAM,WAA9C,a,SCjFJ5C,EAAYC,aAAW,SAAC0F,GAAD,MAAY,CACvCqB,UAAW,CACTC,WAAYtB,EAAMuB,QAAQ,SAwCfC,EApCF,WACX,IAAMjG,EAAUlB,IADC,EAEWrB,oBAAS,GAFpB,mBAEVyI,EAFU,KAEFC,EAFE,OAGmB1I,mBAAS,IAH5B,mBAGV2I,EAHU,KAGEC,EAHF,OAIW5I,mBAAS,CAAC,SAAU,SAAU,WAAY,UAAW,SAJhE,mBAIV6I,EAJU,KAMXC,GANW,KAMO,SAACzG,GACvBuG,EAAcvG,GACdqG,GAAU,KAQZ,OACE,kBAACxE,EAAA,EAAD,KACE,kBAAC,EAAD,CAAerC,KAAM8G,EAAYnE,KAAMiE,EAAQ1B,YAP/B,WAClB2B,GAAU,MAOR,kBAACK,EAAA,EAAD,CAAWvH,SAAS,KAAK+B,UAAWhB,EAAQ8F,WAC1C,kBAACnE,EAAA,EAAD,CAAMmE,WAAS,EAACE,QAAS,GAErBM,EAAOX,KAAI,SAAA7F,GACT,OACE,kBAAC6B,EAAA,EAAD,CAAM1B,IAAKH,EAAMA,MAAI,EAAC2G,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACvC,kBAAC,EAAD,CAAarH,KAAMQ,EAAMT,WAAYkH,YCxBxCK,OAVf,WAGE,OAFFrI,IAAMsI,SAASC,QAAU,2CAGrB,kBAACzJ,EAAQ0J,SAAT,CAAkBC,MAAO,CAAE/G,IALhB,qCAMT,kBAAC,EAAD,Q,MCNNgH,IAASC,OACP,kBAAC,GAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.ebf21a09.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Context = React.createContext();","import { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const request = useCallback(async (url, method = \"get\", data = null) => {\r\n    setLoading(true);\r\n    let response = null;\r\n    await axios({\r\n      url, method, data\r\n    })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setSuccess(true);\r\n        response = res.data;\r\n      })\r\n      .catch((err) => {\r\n        console.error(err.response.data);\r\n        setLoading(false);\r\n        setError(err.response.data)\r\n      })\r\n    return response;\r\n  }, [])\r\n\r\n  const clearError = () => {\r\n    setError('');\r\n    setSuccess(false);\r\n  };\r\n\r\n  return {\r\n    loading, request, error, clearError, success\r\n  }\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Context } from '../../hooks/contextHook';\r\nimport { useHttp } from '../../hooks/httpHook';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n//MUI\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nconst WeatherCard = ({ handleOpen, city }) => {\r\n  const [item, setItem] = useState({\r\n    country: '',\r\n    name: '',\r\n    coordinates: {},\r\n    temperature: '',\r\n    temp_min: '',\r\n    temp_max: '',\r\n    weather: {}\r\n  });\r\n  const classes = useStyles();\r\n  const { key } = useContext(Context);\r\n  const { request, loading, error } = useHttp();\r\n\r\n  const openWindow = () => {\r\n    if (Object.keys(item).length) {\r\n      handleOpen(item);\r\n    }\r\n    else return;\r\n  }\r\n\r\n  const getData = async () => {\r\n    const data = await request(`weather?q=${city}&units=metric&appid=${key}`, 'get');\r\n    if (data) {\r\n      const targetItem = {\r\n        name: `${data.name}, ${data.sys.country}`,\r\n        coordinates: data.coord,\r\n        temperature: data.main.temp.toFixed(0),\r\n        temp_min: data.main.temp_min.toFixed(0),\r\n        temp_max: data.main.temp_max.toFixed(0),\r\n        weather: data.weather\r\n      }\r\n      setItem(targetItem);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardActionArea onClick={openWindow}>\r\n          {\r\n            loading ? <Skeleton variant=\"rect\" width=\"100%\" height={200} /> : (\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {item.name}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                  Day {item.temp_max}°C - Night {item.temp_min}°C\r\n                </Typography>\r\n                <Grid className={classes.main}>\r\n                  <Typography variant=\"h2\" color=\"textSecondary\">\r\n                    {item.temperature}°C\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    {item.weather.description}\r\n                  </Typography>\r\n                </Grid>\r\n              </CardContent>\r\n            )\r\n          }\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button onClick={openWindow} size=\"small\" color=\"primary\">\r\n            More\r\n        </Button>\r\n        </CardActions>\r\n      </Card>\r\n      <Snackbar\r\n        open={!!error}\r\n        autoHideDuration={2500}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          severity=\"error\">An error occurred, please try again later</Alert>\r\n      </Snackbar>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default WeatherCard","import React from 'react';\r\n\r\nconst WeatherIcon = ({ description, day = \"sunny\" }) => {\r\n  console.log(day)\r\n  if (description === \"Clear\") {\r\n    if (day) {\r\n      console.log('Should display')\r\n      return (\r\n        <div className=\"Clear\">\r\n          <i class=\"fas fa-sun\"></i>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"night\">\r\n          <i class=\"fas fa-moon\"></i>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  else if (description === \"Drizzle\") {\r\n    return (\r\n      <div className=\"Drizzle\">\r\n        <i class=\"fas fa-cloud-rain\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Rain\") {\r\n    return (\r\n      <div className=\"Rain\">\r\n        <i class=\"fas fa-cloud-showers-heavy\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Thunderstorm\") {\r\n    return (\r\n      <div className=\"Thunderstorm\">\r\n        <i class=\"fas fa-cloud-showers-heavy\"></i>\r\n      </div>\r\n    )\r\n  }\r\n  else if (description === \"Clouds\") {\r\n    if (day) {\r\n      return (\r\n        <div className=\"Clouds-morning\">\r\n          <i class=\"fas fa-cloud\"></i>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className={description}>\r\n          <i class=\"fas fa-cloud\"></i>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  else {\r\n    return (\r\n      <div className={description}>\r\n        <i class=\"fas fa-smog\"></i>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherIcon;","import React, { useEffect, useState } from 'react';\r\nimport { useTime } from '../../util/dateFormatter';\r\nimport WeatherIcon from '../WeatherIcon';\r\n//MUI\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\n\r\nconst DayWeather = ({ day }) => {\r\n  const [dayItem, setDayItem] = useState({});\r\n  const { formatDate } = useTime();\r\n\r\n  useEffect(() => {\r\n    if (day.dt) {\r\n      setDayItem({\r\n        min: day.temp.min.toFixed(0),\r\n        max: day.temp.max.toFixed(0),\r\n        description: day.weather[0].description,\r\n        icon: day.weather[0].main,\r\n      })\r\n    }\r\n  }, [day])\r\n\r\n  return (\r\n    <ListItem role={undefined} dense button >\r\n      {day.dt ? (\r\n        <>\r\n          <ListItemIcon>\r\n            <WeatherIcon description={dayItem.icon} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={`${formatDate(day.dt)}, ` + dayItem.max + '/' + dayItem.min + '°C'} secondary={dayItem.description} />\r\n        </>\r\n      ) : null}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default DayWeather\r\n","import * as dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport 'dayjs/locale/ru';\r\nimport utc from 'dayjs/plugin/utc';\r\nimport calendar from 'dayjs/plugin/calendar';\r\nimport weekday from 'dayjs/plugin/weekday'\r\n\r\nexport const useTime = () => {\r\n  dayjs.extend(relativeTime);\r\n  dayjs.extend(calendar);\r\n  dayjs.extend(weekday)\r\n  dayjs.extend(utc);\r\n  dayjs.locale('en');\r\n\r\n  const formatDate = (number) => {\r\n    return dayjs(new Date()).add(number, 's').format('ddd, MMM-M')\r\n  }\r\n\r\n  return {\r\n    formatDate,\r\n  }\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport { Context } from '../../hooks/contextHook';\r\nimport { useHttp } from '../../hooks/httpHook';\r\nimport DayWeather from '../DayWeather';\r\n//MUI\r\nimport List from '@material-ui/core/List';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst WeatherWindow = ({ handleClose, open, city }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const { request, loading, error } = useHttp();\r\n  const { key } = useContext(Context);\r\n  const [item, setItem] = useState({\r\n    current: {\r\n      temperature: 0,\r\n      temp_min: 0,\r\n      temp_max: 0\r\n    },\r\n    daily: {\r\n\r\n    }\r\n  });\r\n\r\n  const getData = async () => {\r\n    const data = await request(`onecall?lat=${city.coordinates.lat}&lon=${city.coordinates.lon}&exclude=hourly,minutely&units=metric&appid=${key}`, 'get');\r\n    if (data) {\r\n      setItem({\r\n        daily: data.daily.slice(0, data.daily.length - 1),\r\n        current: city\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (city.name) {\r\n      getData()\r\n    }\r\n  }, [city])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <DialogTitle>{city.name}</DialogTitle>\r\n        <DialogContent>\r\n          {\r\n            loading ? <Skeleton width={'100%'} height={700} /> : (\r\n              <>\r\n                <Grid>\r\n                  <Typography variant=\"h2\" color=\"textSecondary\">\r\n                    {item.current.temperature}°C\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                    Day {item.current.temp_max}°C - Night {item.current.temp_min}°C\r\n                </Typography>\r\n                </Grid>\r\n                <Divider />\r\n                <Grid>\r\n                  <Typography variant=\"h5\">7-day forecast</Typography>\r\n                  <List>\r\n                    {\r\n                      item.daily.length ? item.daily.map((day) => {\r\n                        return <DayWeather key={day.dt} day={day} />\r\n                      }) : null\r\n                    }\r\n                  </List>\r\n                </Grid>\r\n              </>\r\n            )\r\n          }\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherWindow","import React, { useState } from 'react';\r\nimport WeatherCard from '../../components/WeatherCard';\r\nimport WeatherWindow from '../../components/WeatherWindow';\r\n//MUI\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    paddingTop: theme.spacing(25)\r\n  }\r\n}))\r\n\r\nconst Main = () => {\r\n  const classes = useStyles();\r\n  const [opened, setOpened] = useState(false);\r\n  const [activeItem, setActiveItem] = useState({});\r\n  const [cities, setCities] = useState(['Moscow', 'London', 'New York', 'Beijing', 'Rome']);\r\n\r\n  const handleClickOpen = (item) => {\r\n    setActiveItem(item)\r\n    setOpened(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpened(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <Grid>\r\n      <WeatherWindow city={activeItem} open={opened} handleClose={handleClose} />\r\n      <Container maxWidth=\"md\" className={classes.container}>\r\n        <Grid container spacing={2}>\r\n          {\r\n            cities.map(item => {\r\n              return (\r\n                <Grid key={item} item xs={12} sm={6} md={3}>\r\n                  <WeatherCard city={item} handleOpen={handleClickOpen} />\r\n                </Grid>\r\n              )\r\n            })\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Context } from './hooks/contextHook';\r\nimport Main from './containers/Main';\r\n\r\nconst apiKey = '433b880a1dcad0ae0eb12634ab640f6b';\r\nfunction App() {\r\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5/';\r\n\r\n  return (\r\n    <Context.Provider value={{ key: apiKey }}>\r\n      <Main />\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n); \r\n"],"sourceRoot":""}